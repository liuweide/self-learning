<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.dao.IUserDao">
    <!-- 配置 查询结果的列名和实体类的属性名的对应关系 -->
    <resultMap id="userMap" type="com.example.domain.User">
        <!-- 主键字段的对应-->
        <id property="userId" column="id"></id>
        <!-- 非主键字段的对应 -->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userBirthday" column="birthday"></result>
        <result property="userSex" column="sex"></result>
    </resultMap>
    <!--配置查询所有-->
    <select id="findAll" resultMap="userMap">
    <!-- 当java类中的属性名与数据库列名不对应时，可采用下列取别名的方法对应，效率最高。或者采用resultMap方式-->
    <!-- select id as userId, username as userName, address as userAddress, sex as userSex, birthday as userBirthday from user-->
    select * from user
    </select>

<!-- 根据id查询用户   -->
    <select id="findById" resultMap="userMap" parameterType="Integer">
        select * from user where id=#{uid};
    </select>
<!--  根据名称模糊查询  -->
    <select id="findByName" resultMap="userMap" parameterType="String">
        select * from user where username like #{uname}
    </select>
<!-- 根据queryVo的条件查询用户   -->
    <select id="findUserByVo" resultMap="userMap" parameterType="com.example.domain.QueryVo">
        select * from user where username like #{user.username};
    </select>


    <insert id="saveUser" parameterType="com.example.domain.User">
        <selectKey keyProperty="userId" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday) values(#{userName},#{userAddress},#{userSex},#{userBirthday});
    </insert>
    <update id="updateUser" parameterType="com.example.domain.User">
        update user set username=#{userName},address=#{userAddress},sex=#{userSex},birthday=#{userBirthday} where id=#{userId};
    </update>
    <delete id="deleteUser" parameterType="Integer">
        delete from user where id=#{uid};
    </delete>

</mapper>